{
  "hash": "e7d31315288626158c88fa9111f76cc7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"M2 Carthagéo - Du discret au continu - Séance 5\"\nsubtitle: \"Séance 5 - Distances et variations spatiales - Approche naïve de l'auto-corrélation spatiale\"\nformat:\n  clean-revealjs:\n    output-file: \"index.html\"\n    mermaid-format: js\n    slide-number: c/t\n    show-slide-number: all\n    preview-links: true\n    chalkboard: false\n    header-logo: ../img/_logo-pantheon-sorbonne-RVB-bleu-or.svg\n    scrollable: false\n    favicon: ../img/favicon.ico\n    footer: \"M2 Carthagéo - Analyse Spatiale R.C. - Séance 5\"\n    fig-cap-location: margin\nfilters:\n  - reveal-header\nauthor: \n  name: \"Robin Cura\"\n  affiliations: \"Université Paris 1 Panthéon-Sorbonne\"\ndate: \"2025-10-22\"\ndate-format: \"[Mardi] DD/MM/YYYY\"\nparams:\n  correction: true\n---\n\n## Comment choisir des seuils de distance pour les interpolations ?\n\nOn utilise deux grandes méthodes de choix : \n\n- Des seuils basés d'après des connaissances thématiques\n- Des seuils basés sur les distances empiriques de l'échantillon de mesures\n\n## Mesures de distances empiriques\n\n#### Chargement des packages\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(tidyverse)\n  library(readxl)\n  library(sf)\n  library(potential)\n  library(patchwork)\n  library(glue)\n})\n```\n:::\n\n\n----------------\n\n\n#### Import des données\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommunes_paris <- st_read(\"../DATA/Maillages_Limitrophes_Paris.gpkg\", layer = \"Communes\", as_tibble = TRUE) %>%\n  st_transform(2154) %>%\n  filter(INSEE_DEP == \"75\") %>% filter(INSEE_COM != \"75056\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Communes' from data source \n  `D:\\Dropbox\\2_Enseignement\\2025-2026\\M2_AnaSpa\\SITE\\posts\\RC\\DATA\\Maillages_Limitrophes_Paris.gpkg' \n  using driver `GPKG'\nSimple feature collection with 50 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 639863 ymin: 6855647 xmax: 663292 ymax: 6872673\nProjected CRS: RGF93 Lambert 93\n```\n\n\n:::\n\n```{.r .cell-code}\ncontour_paris <- communes_paris %>% summarise() %>% st_buffer(300)\n```\n:::\n\n\n------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbureauxVote <- st_read(\"../DATA/BureauxVote_Paris_L93.gpkg\", as_tibble = TRUE) %>%\n  st_transform(2154)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BureauxVote_Paris_L93' from data source \n  `D:\\Dropbox\\2_Enseignement\\2025-2026\\M2_AnaSpa\\SITE\\posts\\RC\\DATA\\BureauxVote_Paris_L93.gpkg' \n  using driver `GPKG'\nSimple feature collection with 899 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 645317.8 ymin: 6857789 xmax: 656919 ymax: 6866868\nProjected CRS: RGF93 v1 / Lambert-93\n```\n\n\n:::\n\n```{.r .cell-code}\nresultatsVote <- read_xlsx(\"../DATA/BureauxVote_Paris_Resultats_Presi2022_T1.xlsx\") %>%\n  select(-c(1:6))\n\nresultats_bureaux <- bureauxVote %>%\n  left_join(resultatsVote, by = c(\"CodeBVote\" = \"Code du b.vote\")) %>%\n  mutate(Inscrits = as.numeric(Inscrits))\n```\n:::\n\n\n\n----------------\n\n### 1 - Distance au plus proche voisin\n\nLe *package* `nngeo` permet de calculer de nombreux types de distances entre des objets `sf`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nngeo)\nlibrary(listviewer)\n\nliste_distance <- st_nn(x = resultats_bureaux, y = resultats_bureaux,\n                        k = 1, returnDist = TRUE)\nlistviewer::jsonedit(liste_distance)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"jsonedit html-widget html-fill-item\" id=\"htmlwidget-6c4d33063a1ec805c6a9\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6c4d33063a1ec805c6a9\">{\"x\":{\"data\":{\"nn\":[848,2,606,328,5,7,7,751,180,767,430,12,13,14,143,16,144,18,19,486,21,22,835,24,25,26,27,28,29,30,31,845,33,38,550,606,37,38,814,502,810,42,43,44,710,300,47,818,49,50,676,299,224,367,55,56,57,723,59,60,388,62,63,64,734,309,67,68,69,70,411,72,73,74,75,76,456,166,79,848,81,37,5,747,460,86,461,88,89,90,91,710,615,94,95,377,97,98,846,100,101,103,103,104,105,835,585,108,109,450,111,112,113,114,115,421,117,118,119,120,121,677,123,124,50,126,127,287,129,130,131,176,754,134,135,136,137,820,712,676,143,142,143,144,827,146,147,148,149,150,151,152,153,154,155,105,157,896,159,160,276,162,892,164,165,166,167,168,169,170,170,172,173,856,812,176,177,864,179,180,181,182,466,770,19,186,188,188,189,400,24,192,487,194,195,196,801,198,199,198,201,166,203,127,205,38,207,208,209,210,211,212,213,214,215,216,217,218,219,510,221,166,179,224,228,226,227,228,229,568,231,872,825,781,716,236,237,238,239,240,241,242,243,688,245,246,846,304,249,250,251,252,259,787,255,256,266,258,259,260,261,249,263,103,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,75,281,282,742,284,285,205,287,288,329,334,751,292,293,709,218,360,50,298,299,300,301,519,828,304,788,306,307,308,309,310,311,312,313,314,315,316,317,318,319,696,321,198,282,415,325,326,440,328,329,329,747,850,333,334,86,336,337,338,339,340,341,857,343,344,90,346,347,671,179,350,351,515,94,773,355,356,621,358,868,360,361,362,363,772,95,511,367,368,369,370,144,561,373,468,144,682,377,685,379,380,381,201,383,384,385,386,387,388,389,390,391,392,272,272,310,647,487,398,399,400,401,402,403,882,405,406,802,408,409,410,411,412,576,414,415,416,417,418,419,597,421,422,423,601,895,603,427,428,429,430,81,850,130,434,131,436,672,438,439,440,441,301,723,237,381,446,447,448,449,450,451,452,421,454,455,456,457,430,459,460,461,400,463,417,863,466,761,468,126,169,471,472,473,474,475,238,686,721,479,480,386,482,483,484,255,486,487,488,489,490,491,115,595,695,495,496,329,498,499,207,501,502,503,504,337,641,832,135,509,510,511,512,513,514,515,716,517,517,519,520,521,522,523,524,525,573,251,528,529,530,531,532,533,534,535,29,593,281,539,540,541,542,543,285,543,430,703,766,549,550,551,43,553,757,555,556,300,231,762,564,561,622,563,564,702,360,510,568,473,781,148,572,573,574,575,576,577,578,579,391,581,398,583,584,585,586,24,588,589,590,591,592,593,74,595,29,597,801,599,600,601,602,603,5,205,606,607,333,855,610,216,612,613,181,615,616,284,618,619,438,621,622,623,439,848,848,627,358,629,143,631,236,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,860,651,652,653,654,655,656,657,658,659,743,661,606,550,859,665,666,209,131,669,670,671,672,167,762,561,676,677,677,360,13,681,682,876,383,685,686,381,688,689,255,400,692,693,694,695,696,76,601,699,700,701,702,703,205,705,706,707,347,709,710,711,712,229,298,629,716,301,520,250,720,721,186,723,720,725,726,727,728,729,730,790,732,308,734,735,736,893,738,739,740,741,742,743,744,329,746,747,748,130,750,751,752,753,754,665,756,757,758,759,79,761,762,438,762,361,766,767,768,769,770,824,772,773,681,56,776,631,377,18,780,781,782,783,243,785,446,787,788,789,790,791,792,104,794,488,796,797,798,599,491,801,802,696,804,2,806,550,606,747,810,340,812,813,814,815,615,769,818,819,820,821,822,616,824,825,373,827,828,641,830,831,832,833,834,835,402,837,838,839,840,319,842,843,844,845,846,47,848,849,850,38,287,854,854,855,856,857,858,859,860,861,862,863,864,509,866,899,868,510,870,772,872,143,143,301,876,246,525,879,880,881,882,883,884,535,886,887,888,889,410,891,892,893,416,895,896,897,167,899],\"dist\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},\"options\":{\"mode\":\"tree\",\"modes\":[\"text\",\"tree\",\"table\"]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n----------------\n\n\n::: callout-tip\n\nEn paramétrant `k`, on choisit le nombre de plus proches voisins dont calculer la distance.\n\nIci, en choisissant une valeur de `k = 1`, la fonction calcule la distance entre chaque point et son plus proche voisin, ie. lui-même (voir les distances qui sont toutes à 0).\n\nPour calculer la distance au plus proche voisin réel, il faut donc indiquer `k = 2` et ne conserver que le second voisin.\n\n:::\n\n\n----------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nngeo)\nlibrary(listviewer)\n\nliste_distance_2 <- st_nn(x = resultats_bureaux, y = resultats_bureaux,\n                          k = 2, returnDist = TRUE)\ndistance_ppv <- liste_distance_2$dist %>% map_dbl(2)\nsummary(distance_ppv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    0.00   55.85   66.05 1245.94 \n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\n#### Quel est le problème ici ?\n:::\n\n\n------------\n\n\n::: callout-tip\n\n### Les bureaux de vote sont souvent regroupés dans des lieux municipaux communs.\n\n- Il est donc nécessaire de dé-doublonner les points pour en mesurer les distances réelles.\n:::\n\n#### Solution rapide : suppression pure des doublons géométriques\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbureaux_distincts <- resultats_bureaux %>% select() %>% distinct()\ndistance_bureaux <- st_nn(x = bureaux_distincts, y = bureaux_distincts,\n                          k = 2, returnDist = TRUE) %>%\n  pluck(\"dist\") %>%\n  map_dbl(2)\nsummary(distance_bureaux)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n   0.0005   47.7112  125.9838  151.4778  229.5483 1245.9397 \n```\n\n\n:::\n:::\n\n\n------------\n\n\n::: callout-tip\n\n### Les bureaux de vote sont souvent regroupés dans des lieux municipaux communs.\n\n- Il est donc nécessaire de dé-doublonner les points pour en mesurer les distances réelles.\n:::\n\n#### Solution plus juste : agrégation des votes des doublons\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbureaux_distincts <- resultats_bureaux %>% group_by(geom) %>%\n  summarise(\n    across(where(is.character), ~first(.x)),\n    across(where(is.numeric), ~sum(.x)),\n    .groups = \"drop\"\n    )\n\ndistance_bureaux <- st_nn(x = bureaux_distincts, y = bureaux_distincts,\n                          k = 2, returnDist = TRUE) %>%\n  pluck(\"dist\") %>%\n  map_dbl(2)\nsummary(distance_bureaux)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n   0.0005   47.7112  125.9838  151.4778  229.5483 1245.9397 \n```\n\n\n:::\n:::\n\n\n----------------------\n\n::: callout-exercice\n\n#### Exercice : Tracer l'histogramme et la courbe de densité des distances au plus proche voisin des bureaux de vote\n\n:::\n\n\n------------------------\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_bureaux_tbl <- distance_bureaux %>%\n  as_tibble() %>%\n  rename(distance = value)\n\np1 <- ggplot(distance_bureaux_tbl) +\n  aes(distance) +\n  geom_histogram(fill = \"#67c9ff\", colour = \"white\")\n\np2 <- p1 + \n  geom_density()\n\np3 <- ggplot(distance_bureaux_tbl) +\n  aes(distance) +\n  geom_histogram(aes(y = after_stat(density)),\n                 fill = \"#67c9ff\",\n                 colour = \"white\") +\n  geom_density(aes(y = after_stat(density)))\np3\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n------------------------\n\n::: callout-tips\n\n#### Où couper ?\n\n- Tracer la courbe des fréquences cumulées en fonction de la distance au plus proche voisin\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrequence_cumulee <- distance_bureaux_tbl %>%\n  arrange(distance) %>%\n  mutate(dummy = 1/nrow(distance_bureaux_tbl)) %>%\n  mutate(cumfreq = cumsum(dummy))\n```\n:::\n\n\n---------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(frequence_cumulee) +\n  aes(distance, cumfreq) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent)\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n---------------------------\n\n::: callout-alert\n\n#### Pourquoi s'arrêter au premier plus proche voisin ?\n\n:::\n\n---------------------\n\n\n### 2 - Distances aux n plus proche voisins\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_bureaux_10 <- st_nn(x = bureaux_distincts, y = bureaux_distincts,\n                          k = 11, returnDist = TRUE) %>%\n  pluck(\"dist\") %>%\n  enframe() %>%\n  rename(ID = name) %>%\n  unnest(value) %>%\n  rename(distance = value) %>%\n  group_by(ID) %>%\n  mutate(num_voisin = row_number() - 1) %>%\n  ungroup() %>%\n  filter(num_voisin > 0) %>%\n  mutate(num_voisin = as.factor(num_voisin))\n```\n:::\n\n\n::: callout-exercice\n\n#### Exercice : Représentation des distances aux 10 plus proches voisins\n\n:::\n\n----------------------\n\n::: {.panel-tabset}\n\n\n\n#### Basique\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(distance_bureaux_10) +\n  geom_histogram(aes(x = distance))\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n#### Facets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(distance_bureaux_10) +\n  geom_histogram(aes(x = distance)) +\n  facet_wrap(~num_voisin, ncol = 1)  \n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n#### Ridgelines\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\n\nggplot(distance_bureaux_10) +\n  geom_density_ridges(aes(x = distance, y = num_voisin))\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n#### Ridge bins\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\n\nggplot(distance_bureaux_10) +\n  geom_density_ridges(aes(x = distance, y = num_voisin), stat = \"binline\", scale = 0.9)\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n:::\n\n------------------------\n\n\n### 3 - Distances moyennes\n\n::: callout-note\n\n#### Tant qu'à faire, autant analyser l'ensemble des distances entre tous les bureaux de vote\n\n:::\n\n::: callout-exercice\n\n#### Exercice : Mesure de distances\n\n- A l'aide de la fonction `st_distance` du package `sf`, calculez la matrice de distance entre tous les bureaux de vote de Paris et affichez-en l'histogramme\n:::\n\n------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrice_distance <- st_distance(x = resultats_bureaux, y = resultats_bureaux,\n                                by_element = FALSE)\n\nliste_distances_BV <- matrice_distance %>%\n  as.matrix() %>%\n  as_tibble() %>%\n  mutate(ID_Origine = as.character(row_number()), .before = 1) %>%\n  pivot_longer(-ID_Origine) %>%\n  mutate(ID_Destination = str_remove(name, pattern = \"V\")) %>%\n  mutate(distance = as.numeric(value)) %>%\n  select(-value, -name) %>%\n  filter(ID_Origine != ID_Destination)\n\nglimpse(liste_distances_BV)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 807,302\nColumns: 3\n$ ID_Origine     <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", …\n$ ID_Destination <chr> \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12…\n$ distance       <dbl> 973.0925, 2827.1982, 2807.4550, 2804.2950, 3033.7936, 3…\n```\n\n\n:::\n:::\n\n\n\n-------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(liste_distances_BV) +\n  geom_histogram(aes(distance, after_stat(density)))\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n\n------------------\n\n### 4 - Distances et différences\n\n::: callout\n#### Maintenant qu'on a une liste complète des distances, pourquoi est-ce qu'on n'explorerait pas le lien entre distance (dans Paris) et comportement de vote ?\n:::\n\n- **Dit autrement, on peut chercher à voir si les comportements électoraux présentent une <u>autocorrélation spatiale</u>**\n\n::: callout-alert\n\n#### En dépit de ce que nous avons fait lors des précédentes séances, il n'y a strictement <u>aucune logique</u> à réaliser une interpolation de variables qui ne sont pas corrélées spatialement.\n\n:::\n\n------------------\n\n#### Autocorrélation spatiale naïve\n\n- On peut chercher à voir s'il y a un lien entre la variation d'une variable électorale et la distance entre les bureaux de vote.\n\n- Prenons l'exemple des votes pour Emmanuel Macron lors du 1er tour des présidentielles 2022 à Paris\n\n--------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvotes_macron <- resultats_bureaux %>%\n  st_drop_geometry() %>%\n  mutate(pctMACRON = MACRON / Inscrits) %>%\n  select(pctMACRON) %>%\n  mutate(ID_bureau = as.character(row_number()))\n\ncouples_bureaux <- liste_distances_BV %>%\n  left_join(votes_macron, by = c(\"ID_Origine\" = \"ID_bureau\")) %>%\n  rename(pctMACRON_Origine = pctMACRON) %>%\n  left_join(votes_macron, by = c(\"ID_Destination\" = \"ID_bureau\")) %>%\n  rename(pctMACRON_Destination = pctMACRON)\n\nglimpse(couples_bureaux)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 807,302\nColumns: 5\n$ ID_Origine            <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ ID_Destination        <chr> \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"1…\n$ distance              <dbl> 973.0925, 2827.1982, 2807.4550, 2804.2950, 3033.…\n$ pctMACRON_Origine     <dbl> 0.3164806, 0.3164806, 0.3164806, 0.3164806, 0.31…\n$ pctMACRON_Destination <dbl> 0.3083141, 0.4026051, 0.3781447, 0.3616541, 0.36…\n```\n\n\n:::\n:::\n\n\n-----------------\n\n::: callout-exercice\n\n#### Exercice - Comment analyser la différence ? 1/3\n\n- Proposer une métrique permettant de mesurer l'écart de votes, et représentez-la en fonction de la distance.\n\n:::\n\n-----------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndifference_votes <- couples_bureaux %>%\n  mutate(diffPCT = pctMACRON_Origine - pctMACRON_Destination)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(difference_votes) +\n  geom_point(aes(x = distance, y = diffPCT))\n```\n:::\n\n![](../img/plot_distance_difference.png){fig-align='center'}\n\n\n------------------------\n\n::: callout-exercice\n\n#### Exercice - Comment analyser la différence ? 2/3\n\n- La représentation des différences directes est rapidement illisibile en raison de la symétrie des données.\n\n- Filtrer le jeu de données précédent pour n'afficher les différences qu'une fois, et uniquement de manière positive\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndifference_votes_assym <- difference_votes %>%\n  filter(ID_Origine > ID_Destination) %>%\n  mutate(diffAbs = abs(diffPCT))\n```\n:::\n\n\n---------\n\n::: {.panel-tabset}\n\n##### Directe\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(difference_votes_assym) +\n  geom_point(aes(x = distance, y = diffAbs))\n```\n:::\n\n![](../img/plot_distance_absolu.png){fig-align='center'}\n\n##### Densité\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(difference_votes_assym) +\n  geom_density_2d(aes(x = distance, y = diffAbs))\n```\n:::\n\n![](../img/plot_distance_densite.png){fig-align='center'}\n\n:::\n\n----------------------\n\n::: callout-exercice\n\n#### Exercice - Comment analyser la différence ? 3/3\n\n- Le lien entre distance et variation du taux de vote Macron n'est toujours pas évident à lire.\n\n- Proposer une méthode permettant de synthétiser la tendance\n\n:::\n\n---------------------------------\n\n### 5 - Vers le semi-variogramme\n\n#### On discrétise la distance par bornes de 100m\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistances_differences_discretes <- difference_votes_assym %>%\n  mutate(bande = cut(distance, breaks = c(0:120) * 100, labels = FALSE)) %>%\n  mutate(bande = bande * 100)\n\nmeanDiff <- distances_differences_discretes %>%\n  group_by(bande) %>%\n  summarise(diffmoyenne = mean(diffAbs), nb = n())\n```\n:::\n\n\n-------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(meanDiff) +\n  aes(x = bande, y = diffmoyenne, size = nb) +\n  geom_point() +\n  scale_y_continuous(labels = scales::percent)\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n----------------------------\n\n### Les semivariogrammes\n\n::: callout-note\n#### Cette manière de représenter l'autocorrélation spatiale entre des entités est à la base d'un outil de géostatistique, le semivariogramme.\n\n- Cela consiste à représenter la semi-variance en fonction de bandes de distances :\n\n$semivar(d_{ij}) = 0.5 \\times \\frac{\\sum_{i..j}{(valeur_{i} - valeur_j)^2}{}}{n}$\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemivarDiff <- distances_differences_discretes %>%\n  group_by(bande) %>%\n  summarise(semivar = 0.5 * mean(diffAbs^2), nb = n())\n```\n:::\n\n\n---------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(semivarDiff) +\n  aes(x = bande, y = semivar, size = nb) +\n  geom_point() +\n  scale_y_continuous()\n```\n\n::: {.cell-output-display}\n![](TD5_AutoCor_Manuelle_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "TD5_AutoCor_Manuelle_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../../site_libs/jsoneditor-0.18.7/jsoneditor.min.js\"></script>\n<script src=\"../../../site_libs/jsonedit-binding-4.0.0/jsonedit.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}